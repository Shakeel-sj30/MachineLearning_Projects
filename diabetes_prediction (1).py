# -*- coding: utf-8 -*-
"""Diabetes prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/178e0JN0ZtPAAFS-OAZkK7UFJiVsdk8Pz
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

# loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset['Outcome'].value_counts()

# mean value
diabetes_dataset.groupby('Outcome').mean()

#seperating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']
print(X)
print(Y)

"""Data  Standarization"""

scaler = StandardScaler()
standadized_data=scaler.fit_transform(X)
print(standadized_data)

X=standadized_data
Y=diabetes_dataset['Outcome']
print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')

#training the support vector machine
classifier.fit(X_train,Y_train)

"""model evaluation"""

#accuracy score
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)
print('Accuracy of the traing data is:',training_data_accuracy)

#accuracy prediction on test data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)
print('Accuracy of the test data is :',test_data_accuracy)

input_data=(6,148,72,35,0,33.6,0.627,50)
#changing input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the array as we predicting for one instance
input_data_reshaped_array=input_data_as_numpy_array.reshape(1,-1)
#standardize the input data
std_data=scaler.transform(input_data_reshaped_array)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

"""saving the trained model"""

import pickle

filename= "trained_model.sav"
pickle.dump(classifier,open(filename,'wb'))

"""loading the saved model"""

loaded_model=pickle.load(open('trained_model.sav','rb'))

input_data=(6,148,72,35,0,33.6,0.627,50)
#changing input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the array as we predicting for one instance
input_data_reshaped_array=input_data_as_numpy_array.reshape(1,-1)
#standardize the input data
std_data=scaler.transform(input_data_reshaped_array)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')