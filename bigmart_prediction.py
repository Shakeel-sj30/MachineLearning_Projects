# -*- coding: utf-8 -*-
"""Bigmart prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t7--0IOxX2wdqSQ0u5Kiuqk5rFQi-pjL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

big_mart=pd.read_csv('/content/big_mart_data.csv')

big_mart.head()

big_mart.info()

big_mart.isnull().sum( )

"""Handling missing values"""

big_mart['Item_Weight'].mean()

big_mart['Item_Weight'].fillna(big_mart['Item_Weight'].mean(),inplace=True)

big_mart.isnull().sum()

mode_of_outlet_size=big_mart.pivot_table(values='Outlet_Size',columns='Outlet_Type',aggfunc=(lambda x:x.mode()[0]))

print(mode_of_outlet_size)

missing_values=big_mart['Outlet_Size'].isnull()
print(missing_values)

big_mart.loc[missing_values,'Outlet_Size']=big_mart.loc[missing_values,'Outlet_Type'].apply(lambda x:mode_of_outlet_size[x])

"""Data Analysis"""

big_mart.describe()

sns.set()

#item weight distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart['Item_Weight'])
plt.show()

#item Visibility distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart['Item_Visibility'])
plt.show()

#item Mrp distribution
plt.figure(figsize=(6,6))
sns.distplot(big_mart['Item_MRP'])
plt.show()

#outlet establishment
plt.figure(figsize=(6,6))
sns.countplot(x='Outlet_Establishment_Year',data=big_mart)
plt.show()

"""Categorical features"""

plt.figure(figsize=(6,6))
sns.countplot(x='Item_Fat_Content',data=big_mart)
plt.show()

plt.figure(figsize=(30,8))
sns.countplot(x='Item_Type',data=big_mart)
plt.show()

#outlet size
plt.figure(figsize=(6,6))
sns.countplot(x='Outlet_Size',data=big_mart)
plt.show()

"""Data pre-processing"""

big_mart['Item_Fat_Content'].value_counts()

big_mart.replace({'Item_Fat_Content':'Low Fat','LF':'Low fat','reg':'Regular'},inplace=True)

"""Label Encoding"""

encoder=LabelEncoder()

big_mart['Item_Identifier']=encoder.fit_transform(big_mart['Item_Identifier'])

big_mart['Item_Outlet_Sales']=encoder.fit_transform(big_mart['Item_Outlet_Sales'])
big_mart['Item_Fat_Content']=encoder.fit_transform(big_mart['Item_Fat_Content'])
big_mart['Item_Type']=encoder.fit_transform(big_mart['Item_Type'])
big_mart['Outlet_Identifier']=encoder.fit_transform(big_mart['Outlet_Identifier'])
big_mart['Outlet_Size']=encoder.fit_transform(big_mart['Outlet_Size'])
big_mart['Outlet_Location_Type']=encoder.fit_transform(big_mart['Outlet_Location_Type'])
big_mart['Outlet_Type']=encoder.fit_transform(big_mart['Outlet_Type'])

"""Splitting features and Target"""

X=big_mart.drop(columns='Item_Outlet_Sales',axis=1)
Y=big_mart['Item_Outlet_Sales']

print(X)
print(Y)



#Splitting data into traing & test data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Machine Learning Model Training

XGBoost Regressor
"""

regressor=XGBRegressor()
regressor.fit(X_train,Y_train)

"""Evalution"""

traing_data_prediction=regressor.predict(X_train)

#R squre value
r2_train=metrics.r2_score(Y_train,traing_data_prediction)

print('R squared value=',r2_train)

#prediction on test data
test_data_prediction=regressor.predict(X_test)

r2_test=metrics.r2_score(Y_test,test_data_prediction)

print('R squared value=',r2_test)