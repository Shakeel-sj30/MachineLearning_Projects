# -*- coding: utf-8 -*-
"""Breast Cancer Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vgAnJ25o-VK5dU3dfbo9uGw4k8ePGxdH
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

#loading data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

#loading the data to a data fram
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

data_frame.head()

#adding the target column to the data fram
data_frame['label'] = breast_cancer_dataset.target

data_frame.isnull().sum()

data_frame.describe()

data_frame['label'].value_counts()

X = data_frame.drop(columns='label', axis=1)
Y = data_frame['label']

print(X)
print(Y)

X_ttain,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

#logistic regression
model = LogisticRegression()
model.fit(X_ttain,Y_train)

X_train_prediction=model.predict(X_ttain)
training_data_accuracy=accuracy_score(Y_train,X_train_prediction)
print('Accuracy on training data:',training_data_accuracy)

X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(Y_test,X_test_prediction)
print('Accuracy on test data:',test_data_accuracy)

"""Building a predictive System"""

input_data=(19.69,	21.25,	130.00,	1203.0	,0.10960	,0.15990	,0.1974,	0.12790,	0.2069,	0.05999,	0.7456	,0.7869,	4.585	,94.03,	0.006150	,0.04006	,0.03832	,0.02058,	0.02250,	0.004571,	23.57	,25.53	,152.50	,1709.0,	0.1444,	0.4245,	0.4504,	0.2430,	0.3613,	0.08758)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
    print('The breast cancer is Malignant')
else:
    print('The breast cancer is Benign')

#importing tenserflow and keras
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

#setting up the layers of the neural network
model=keras.Sequential([
    keras.layers.Flatten(input_shape=(30,)),#input layer
    keras.layers.Dense(20,activation='relu'),#relu-rectified linear unit, hidden layer
    keras.layers.Dense(2,activation='sigmoid')# output layer

])

#compling the neural network
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

#training neural network

history =model.fit(X_ttain,Y_train,validation_split=0.1,epochs=10)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_ttain)
X_test_scaled = scaler.transform(X_test)

"""Accuracy and  loss"""

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

"""Accuracy of the model on test data"""

loss,accuracy=model.evaluate(X_test_scaled,Y_test)
print('Test accuracy:',accuracy)

print(X_test_scaled)

Y_pred =model.predict(X_test_scaled)

print(Y_pred.shape)
print(Y_pred[0 ])# gives probability of being 1 , highest probability is one

print(Y_pred)# if 1st value is maximum-0,2nd-1

"""model.predict() gives the prediction probability of each class for that data point"""

#converting the prediction probability to class labels
#argmax - index of maximum value
Y_pred_classes = np.argmax(Y_pred,axis=1)
print(Y_pred_classes)

"""Building the predictive system"""

input_data =(84458202,13.71,20.83,90.2,577.9,0.1189,0.1645,0.09366,0.05985,0.2196,0.07451,0.5835,1.377,3.856,50.96,0.008805,0.03029,0.02488,0.01448,0.01486,0.005412,17.06,28.14,110.6,897,0.1654,0.3682,0.2678,0.1556,0.3196
)
#change the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshapping to check for one value
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
#standardiging the data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = model.predict(input_data_reshaped)
print(prediction)
prediction_label = np.argmax(prediction)
print(prediction_label)
if(prediction_label==0):
    print('The breast cancer is Malignant')
else:
    print('The breast cancer is Benign')